[core]
	editor = \"C:\\Users\\saumy\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\code\" --wait
	autocrlf = true
[user]
[color]
	ui = auto
[alias]  
	# add just the files that are updated.
	ap = add --patch
	ac = !git add -A && git commit -m
	acp = !git add -p && read -p 'Commit message: ' msg && git commit -m \"\\$msg\" && git push
	aliases = !git config --get-regexp \"alias\\\\.\"
	# Add all files of the given type
	add-cached   = "!git add \"$(git ls-files --cached             | sort -u)\""
	add-deleted  = "!git add \"$(git ls-files --deleted            | sort -u)\""
	add-others   = "!git add \"$(git ls-files --others             | sort -u)\""
	add-ignored  = "!git add \"$(git ls-files --ignored            | sort -u)\""
	add-killed   = "!git add \"$(git ls-files --killed             | sort -u)\""
	add-modified = "!git add \"$(git ls-files --modified           | sort -u)\""
	add-stage    = "!git add \"$(git ls-files --stage    | cut -f2 | sort -u)\""
	add-unmerged = "!git add \"$(git ls-files --unmerged | cut -f2 | sort -u)\""
	archive = "!f() { top=\"$(git rev-parse --show-toplevel)\"; cd \"$top\" || exit 1 ; tar cvf \"$top.tar\" \"$top\" ; }; f"
	alias-add = "!f() { git config --global alias.\"$1\" \"$2\"; }; f"
  	au = add --update
	bed = branch --edit-description
	blame = !git blame -w -M -C

	# branch with show description; ideally git will add this feature in the future as `git --show-description`
	bsd = "!f(){ \
		branch=\"${1:-$(git current-branch)}\";  \
		git config \"branch.$branch.description\"; \
	};f"

	br = !git branch
	brr = !git branch -a
	branches = branch -v
	copyPath = "!git rev-parse --show-toplevel | sed -e s#/#\\\\\\\\#g | clip"
	clean-slate = reset --hard && git clean -fd
	# cherry-pick - apply the changes introduced by some existing commits; useful for moving small chunks of code between branches.
  	cp = cherry-pick

  	# cherry-pick - abort the picking process
  	cpa = cherry-pick --abort

  	# cherry-pick - continue the picking process
  	cpc = cherry-pick --continue

  	# cherry-pick -n a.k.a. without making a commit
  	cpn = cherry-pick --no-commit

	# cherry-pick -n a.k.a. without making a commit, and when when recording the commit, append a line that says "(cherry picked from commit ...)"
  	cpnx = cherry-pick --no-commit -x
	colast = checkout -
	config = config --list --global
	create = !git switch -c
	# chart: show a summary chart of activity per author.
	#
	# Example:
	#
	#     $ git chart
	#     ..X..........X...2..12 alice@example.com
	#     ....2..2..13.......... bob@example.com
	#     2.....1....11......... carol@example.com
	#     ..1............1..1... david@example.com
	#     ....1.......1.3.3.22.2 eve@example.com
	#
	# The chart rows are the authors.
	# TODO: sort the rows meaningfully,
	# such as alphabetically, or by count.
	#
	# The chart columns are the days.
	# The chart column prints one character per day.
	#
	#   * For 1-9 commits, show the number.
	#   * For 10 or more commits, show "X" as a visual indicator.
	#   * For no commits, show "." as a visual placeholder.
	#
	# The chart timeline adjusts the date range automatically:
	#
	#   * The timeline starts with the date of the earliest commit.
	#   * The timeline stops with the date of the latest commit.
	#   * The intent is to show the most relevant information.
	#
	# The chart default is to look at the past 6 weeks;
	# this gives a good balance of recency and speed
	# for a team that's currently working on a repo,
	# and also gives a good balance of fitting within
	# one terminal window 80 character width.
	#
	# You can adjust how far back the chart looks,
	# by providing your own `--since` parameter.
	# For example if you want to chart an older repo,
	# that does not have any recent commits, then you
	# you must provide a longer `--since` parameter.
	#
    chart = "!f() { git log --format='%aE %at' --since=6-weeks-ago \"$@\" | awk '\
    function time_to_slot(t) { return strftime(\"%Y-%m-%d\", t, 1) } \
    function count_to_char(i) { return (i > 0) ? ((i < 10) ? i : \"X\") : \".\" } \
    BEGIN { time_min = systime(); time_max = 0; SECONDS_PER_DAY=86400; } \
    { item = $1; time = 0 + $2; \
      if (time > time_max){ time_max = time } else if (time < time_min){ time_min = time }; \
      slot = time_to_slot(time); items[item]++; slots[slot]++; views[item, slot]++; } \
    END { printf(\"Chart time range %s to %s.\\n\", time_to_slot(time_min), time_to_slot(time_max)); \
      time_max_add = time_max + SECONDS_PER_DAY; \
      for(item in items) { row = \"\"; \
        for(time = time_min; time < time_max_add; time += SECONDS_PER_DAY) { \
          slot = time_to_slot(time); count = views[item, slot]; row = row count_to_char(count); } \
        print row, item; } }'; }; f"
	d = !git diff --color-words
	discard = checkout --
	delete-branch = "!f() { git branch -d $1; }; f"
	edit-last = commit --amend
	fap = !git fetch --prune
	find = "!f() { git log --all --grep=\"$1\"; }; f"
	gs = !git status
	history = log --pretty=format:'%h %ad | %s [%an]' --date=short
	ps = !git push
	publish = !git push -u origin HEAD
	ignored = ls-files --others --ignored --exclude-standard
	lol = log --oneline
	last-7-days = log --since='7 days ago' --oneline --graph
	last = log -1 --stat
	# Show log  list with our preferred information with long formats, a.k.a. `lll`
	#
	#   * Long date format using iso8601 strict YYYY-MM-DDTHH:MM:SS+HH:MM
	#   * Long hash commit format using full hexadecimal displayed as name-rev
	#   * Long author field using name and email address and signature mark
	#   * Long layout with columns
	#
	log-list-long = log --graph --topo-order --date=iso8601-strict --no-abbrev-commit --decorate --all --boundary --pretty=format:'%Cblue%ad %C(auto)%h%Creset -%C(auto)%d%Creset %s %Cblue[%aN <%aE>]%Creset %Cblue%G?%Creset'

	# Show log for my own commits by my own user email
	log-my = "!git log --author \"$(git config user.email)\""

	# Show log as a graph
	log-graph = log --graph --all --oneline --decorate

	# Show the date of the first (a.k.a. earliest) commit, in strict ISO 8601 format
	log-date-first = "!git log --date-order --format=%cI | tail -1"

	# Show the date of the last (a.k.a. latest) commit, in strict ISO 8601 format
	log-date-last = log -1 --date-order --format=%cI

	# Show log with the recent hour, day, week, month, year
	log-1-hour  = log --since=1-hour-ago
	log-1-day   = log --since=1-day-ago
	log-1-week  = log --since=1-week-ago
	log-1-month = log --since=1-month-ago
	log-1-year  = log --since=1-year-ago

	# Show log with my own recent hour, day, week, month, year
	log-my-hour  = "!git log --author \"$(git config user.email)\" --since=1-hour-ago"
	log-my-day   = "!git log --author \"$(git config user.email)\" --since=1-day-ago"
	log-my-week  = "!git log --author \"$(git config user.email)\" --since=1-week-ago"
	log-my-month = "!git log --author \"$(git config user.email)\" --since=1-month-ago"
	log-my-year  = "!git log --author \"$(git config user.email)\" --since=1-year-ago"

	# Show a specific format string and its number of log entries
	log-of-format-and-count = "!f() { format=\"$1\"; shift; git log \"$@\" --format=oneline --format=\"$format\" | awk '{a[$0]++}END{for(i in a){print i, a[i], int((a[i]/NR)*100) \"%\"}}' | sort; }; f"
	log-of-count-and-format = "!f() { format=\"$1\"; shift; git log \"$@\" --format=oneline --format=\"$format\" | awk '{a[$0]++}END{for(i in a){print a[i], int((a[i]/NR)*100) \"%\", i}}' | sort -nr; }; f"

	# Show the number of log entries by a specific format string and date format string
	log-of-format-and-count-with-date = "!f() { format=\"$1\"; shift; date_format=\"$1\"; shift; git log \"$@\" --format=oneline --format=\"$format\" --date=format:\"$date_format\" | awk '{a[$0]++}END{for(i in a){print i, a[i], int((a[i]/NR)*100) \"%\"}}' | sort -r; }; f"
	log-of-count-and-format-with-date = "!f() { format=\"$1\"; shift; date_format=\"$1\"; shift; git log \"$@\" --format=oneline --format=\"$format\" --date=format:\"$date_format\" | awk '{a[$0]++}END{for(i in a){print a[i], int((a[i]/NR)*100) \"%\", i}}' | sort -nr; }; f"

	# Show the number of log items by email
	log-of-email-and-count         = "!f() { git log-of-format-and-count \"%aE\" \"$@\"; }; f"
	log-of-count-and-email         = "!f() { git log-of-count-and-format \"%aE\" \"$@\"; }; f"

	# Show the number of log items by hour
	log-of-hour-and-count          = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y-%m-%dT%H\" \"$@\" ; }; f"
	log-of-count-and-hour          = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y-%m-%dT%H\" \"$@\" ; }; f"

	# Show the number of log items by day
	log-of-day-and-count           = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y-%m-%d\" \"$@\" ; }; f"
	log-of-count-and-day           = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y-%m-%d\" \"$@\" ; }; f"

	# Show the number of log items by week
	log-of-week-and-count          = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y#%V\" \"$@\"; }; f"
	log-of-count-and-week          = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y#%V\" \"$@\"; }; f"

	# Show the number of log items by month
	log-of-month-and-count         = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y-%m\" \"$@\" ; }; f"
	log-of-count-and-month         = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y-%m\" \"$@\" ; }; f"

	# Show the number of log items by year
	log-of-year-and-count          = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y\" \"$@\" ; }; f"
	log-of-count-and-year          = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y\" \"$@\" ; }; f"

	# Show the number of log items by hour of day
	log-of-hour-of-day-and-count   = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%H\" \"$@\"; }; f"
	log-of-count-and-hour-of-day   = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%H\" \"$@\"; }; f"

	# Show the number of log items by day of week
	log-of-day-of-week-and-count   = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%u\" \"$@\"; }; f"
	log-of-count-and-day-of-week   = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%u\" \"$@\"; }; f"

	# Show the number of log items by week of year
	log-of-week-of-year-and-count  = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%V\" \"$@\"; }; f"
	log-of-count-and-week-of-year  = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%V\" \"$@\"; }; f"
	modified = ls-files -m
  	# Given a merge commit, find the span of commits that exist(ed).
  	# Not so useful in itself, but used by other aliases.
  	# Thanks to Rob Miller for the merge-span-* aliases.
  	merge-span = "!f() { echo \"$(git log -1 \"$2\" --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 \"$2\" --merges --pretty=format:%P | cut -d' ' -f2)\"; }; f"

  	# Find the commits that were introduced by a merge
  	merge-span-log = "!git log \"$(git merge-span .. \"$1\")\""

  	# Show the changes that were introduced by a merge
  	merge-span-diff = "!git diff \"$(git merge-span ... \"$1\")\""

  	# Show the changes that were introduced by a merge, in your difftool
  	merge-span-difftool = "!git difftool \"$(git merge-span ... \"$1\")\""
	pushNew = "!f() { git push --set-upstream origin $(git branch --show-current); }; f"
	pull-rebase = pull --rebase
	prep = pull --rebase
	push-safe = push --force-with-lease
	push-all = push --all
	pull-safe = pull --ff-only
	# pp - Pull with rebase in order to provide a cleaner, linear, bisectable history
	#
	# To automatically do "pull --rebase" everywhere:
	#
	#     git config --global pull.rebase true
	#
	# To automatically do "pull --rebase" for any branch based on
	# the branch "main":
	#
	#    git config branch.main.rebase true
	#
	# To automatically do "pull --rebase" for any newly-created branches:
	#
	#     git config --global branch.autosetuprebase always
	#
	# To integrate changes between branches, you can merge or rebase.
	#
	# When we use "git pull", git does a fetch then a merge.
	#
	# If we've made changes locally and someone else has pushed changes
	# to our git host then git will automatically merge these together
	# and create a merge commit that looks like this in the history:
	#
	#    12345678 - Merge branch 'foo' of bar into main
	#
	# When we use "git pull --rebase", git does a fetch then a rebase.
	# A rebase resets the HEAD of your local branch to be the same as
	# the remote HEAD, then replays your local commits back into repo.
	# This means you don't get any noisy merge messages in your history.
	# This gives us a linear history, and also helps with git bisect.
	#
  	pr = pull --rebase
	qa = !git commit -m
	recent-branches = for-each-ref --sort=-committerdate --format='%(refname:short) - %(committerdate:relative)' refs/heads/
	remote-branches = branch -r
	reset-hard = !git reset --hard HEAD^
	# rbiu - rebase interactive on our unpushed commits.
	#
	# Before we push our local changes, we may want to do some cleanup,
	# to improve our commit messages or squash related commits together.
	#
	# Let's say I've pushed two commits that are related to a new feature and
	# I have another where I made a spelling mistake in the commit message.
	#
	# When I run "git rbiu" I get dropped into my editor with this:
	#
	#     pick 7f06d36 foo
	#     pick ad544d0 goo
	#     pick de3083a hoo
	#
	# Let's say I want to squash the "foo" and "goo" commits together,
	# and also change "hoo" to say "whatever". To do these, I change "pick"
	# to say "s" for squash; this tells git to squash the two together;
	# I also edit "hoo" to rename it to "whatever". I make the file look like:
	#
	#     pick 7f06d36 foo
	#     s ad544d0 goo
	#     r de3083a whatever
	#
	# This gives me two new commit messages to edit, which I update.
	# Now when I push the remote repo host receives two commits
	#
	#     3400455 - foo
	#     5dae0a0 - whatever
	#
	rbiu = rebase --interactive @{upstream}
	rbi = rebase --interactive
	# reflog - reference log that manages when tips of branches are updated.
  	rl = reflog
	# Delete a branch name, then create the same branch name based on main -
	# useful if you have, for example, a development branch and main branch
	# and they go out of sync, and you want to nuke the development branch.
	#
	# Calls the `publish` and `unpublish` aliases.
	#
  	reincarnate = "!f() { [ $# -gt 0 ] && git checkout \"$1\" && git unpublish && git checkout main && git branch --delete --force \"$1\" && git checkout -b \"$1\" && git publish; }; f"
	rb = "!f() { echo fetching...; git fetch; if [ $? -eq 0 ]; then last_status=$(git status --untracked-files=no --porcelain); if [ \"$last_status\" != \"\" ]; then echo stashing local changes...; git stash; else echo nothing to stash...; fi; if [ $? -eq 0 ]; then echo rebasing...; git rebase; if [ $? -eq 0 ]; then if [ \"$last_status\" != \"\" ]; then echo applying stashed changes...; git stash pop; if [ $? -ne 0 ]; then echo STASH POP FAIL - you will need to resolve merge conflicts with git mergetool; fi; fi; else echo REBASE FAILED - you will need to manually run stash pop; fi; fi; fi; fi; if [ $? -ne 0 ]; then echo ERROR: Operation failed; fi; }; f"
	shaf = "!f() { git checkout stash@{} -- ; }; f"
	shs = "!f() { git stash show -p stash@{}; }; f"
	shl = !git stash list
	shm = !git stash push -m
	sha = "!f() { git stash apply stash@\\{$1\\}; }; f"
	sw = !git switch
	sync-safe = "!f() { git pull --ff-only && git push; }; f"
	squash = rebase -i HEAD~5
	# Stash snapshot - from http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
	# Take a snapshot of your current working tree without removing changes.
	# This is handy for refactoring where you can't quite fit what you've done
	# into a commit but daren't stray too far from now without a backup.
	#
	# Running this:
	#
	#    $ git snapshot
	#
	# Creates this stash:
	#
	#    stash@{0}: On feature/handy-git-tricks: snapshot: Mon Apr 8 12:39:06 BST 2013
	#
	# And seemingly no changes to your working tree.
	#
  	snapshot = "!git stash push --include-untracked --message \"snapshot: $(date)\" && git stash apply \"stash@{0}\" --index"
	today-me = log --since=midnight --author='$(git config user.name)' --oneline --graph
	today-diff = log --since=midnight -p
	today = log --since=midnight --oneline --graph
	today-time = log --since=midnight --pretty=format:'%h %ad | %s [%an]' --date=short
	this-month = log --since='$(date +%Y-%m-01)' --oneline --graph
	this-week = log --since='1 week ago' --oneline --graph
	top-contributors = shortlog -sn --all
	uncommit = reset --soft HEAD~1
	update-all = "!git fetch --all --prune && for branch in $(git branch --format=%(refname:short)); do git checkout $branch && git pull --ff-only; done && git checkout -"
	undo = !git reset --soft HEAD^
	useLast = !git stash apply stash@{0}
	yesterday = log --since='yesterday' --until='midnight' --oneline --graph
	w = whatchanged
	# Publish the current branch by pushing it to the remote "origin",
	# and setting the current branch to track the upstream branch.
	publish = "!f() { git push --set-upstream \"${1:-origin}\" \"$(git current-branch)\"; }; f"

	# Unpublish the current branch by deleting the
	# remote version of the current branch.
	unpublish = "!f() { git push \"${1:-origin}\" :\"$(git current-branch)\"; }; f"

	### alias management aliases ###

  	# git alias: show help for git alias commands.
	alias = "!f(){ \
		echo \"Git Alias is project that has a collection of git alias commands.\"; \
		echo \"The purpose is to help make git easier, faster, and more capable.\"; \
		echo \"Free open source repository <https://github.com/gitalias/gitalias>.\"; \
		echo \"\"; \
		echo \"To see your existing git aliases:\"; \
		echo \"    git aliases\"; \
		echo \"\"; \
		echo \"To see your existing git aliases by using git directly:\"; \
		echo \"    git config --get-regexp ^alias\\.\"; \
	};f"

	# git add-alias: create a new git alias.
	add-alias = "!f() { \
		if [ $# != 3 ]; then \
			echo \"Usage: git add-alias ( --local | --global ) <alias> <command>\"; \
			echo \"Error: this command needs 3 arguments.\"; \
			return 2; \
		fi; \
		if [ -n \"$(git config \"$1\" --get alias.\"$2\")\" ]; then \
			echo \"Alias '$2' already exists, thus no change happened.\"; \
			return 3; \
		fi; \
		git config \"$1\" alias.\"$2\" \"$3\" && \
		return 0; \
		echo \"Usage: git add-alias ( --local | --global ) <alias> <command>\"; \
		echo \"Error: unknown failure.\"; \
		return 1; \
	}; f"

	current-branch = rev-parse --abbrev-ref HEAD

	# churn: show log of files that have many changes
	#
	#   * Written by [Corey Haines](http://coreyhaines.com/)
	#   * Scriptified by Gary Bernhardt
	#   * Obtained from <https://github.com/garybernhardt/dotfiles/blob/main/bin/git-churn>
	#   * Edited for GitAlias.com repo by Joel Parker Henderson
	#   * Comments by Mislav <http://mislav.uniqpath.com/2014/02/hidden-documentation/>
	#
	# Show churn for whole repo:
	#
	#   $ git churn
	#
	# Show churn for specific directories:
	#
	#   $ git churn app lib
	#
	# Show churn for a time range:
	#
	#   $ git churn --since=1-month-ago
	#
	# These are all standard arguments to `git log`.
	#
	# It's possible to get valuable insight from history of a project not only
	# by viewing individual commits, but by analyzing sets of changes as a whole.
	# For instance, `git churn` compiles stats about which files change the most.
	#
	# For example, to see where work on an app was focused on in the past month:
	#
	#     $ git churn --since=1-month-ago app/ | tail
	#
	# This can also highlight potential problems with technical debt in a project.
	# A specific file changing too often is generally a red flag, since it probably
	# means the file either needed to be frequently fixed for bugs, or the file
	# holds too much responsibility and should be split into smaller units.
	#
	# Similar methods of history analysis can be employed to see which people were
	# responsible recently for development of a certain part of the codebase.
	#
	# For instance, to see who contributed most to the API part of an application:
	#
	#    $ git log --format='%an' --since=1-month-ago app/controllers/api/ | \
	#      sort | uniq -c | sort -rn | head
	#
	#    109 Alice Anderson
	#    13 Bob Brown
	#    7 Carol Clark
	#
	churn = "!f() { git log --all --find-copies --find-renames --name-only --format='format:' \"$@\" | awk 'NF{a[$0]++}END{for(i in a){print a[i], i}}' | sort -rn;};f"

	# summary: print a helpful summary of some typical metrics
	summary = "!f() { \
		printf \"Summary of this branch...\n\"; \
		printf \"%s\n\" \"$(git current-branch)\"; \
		printf \"%s first commit timestamp\n\" \"$(git log --date-order --format=%cI | tail -1)\"; \
		printf \"%s last commit timestamp\n\" \"$(git log -1 --date-order --format=%cI)\"; \
		printf \"\nSummary of counts...\n\"; \
		printf \"%d commit count\n\" \"$(git rev-list --count HEAD)\"; \
		printf \"%d date count\n\" \"$(git log --format=oneline --format=\"%ad\" --date=format:\"%Y-%m-%d\" | awk '{a[$0]=1}END{for(i in a){n++;} print n}')\"; \
		printf \"%d tag count\n\" \"$(git tag | wc -l)\"; \
		printf \"%d author count\n\" \"$(git log --format=oneline --format=\"%aE\" | awk '{a[$0]=1}END{for(i in a){n++;} print n}')\"; \
		printf \"%d committer count\n\" \"$(git log --format=oneline --format=\"%cE\" | awk '{a[$0]=1}END{for(i in a){n++;} print n}')\"; \
		printf \"%d local branch count\n\" \"$(git branch | grep -vc \" -> \")\"; \
		printf \"%d remote branch count\n\" \"$(git branch --remotes | grep -vc \" -> \")\"; \
		printf \"\nSummary of this directory...\n\"; \
		printf \"%s\n\" \"$(pwd)\"; \
		printf \"%d file count via git ls-files\n\" \"$(git ls-files | wc -l)\"; \
		printf \"%d file count via find command\n\" \"$(find . | wc -l)\"; \
		printf \"%d disk usage\n\" \"$(du -s | awk '{print $1}')\"; \
		printf \"\nMost-active authors, with commit count and %%...\n\"; git log-of-count-and-email | head -7; \
		printf \"\nMost-active dates, with commit count and %%...\n\"; git log-of-count-and-day | head -7; \
		printf \"\nMost-active files, with churn count\n\"; git churn | head -7; \
	}; f"

	# git move-alias: rename an existing git alias.
	move-alias = "!f() { \
		if [ $# != 3 ]; then \
			echo \"Usage: git move-alias ( --local | --global ) <alias existing name> <new alias name>\"; \
			echo \"Error: this command needs 3 arguments.\"; \
			return 2; \
		fi; \
		if [ \"$2\" = \"$3\" ]; then \
			echo \"The alias names are identical, thus no change happened.\"; \
			return 3; \
		fi; \
		if [ -z \"$(git config \"$1\" --get alias.\"$2\")\" ]; then \
			echo \"Alias '$2' does not exist, thus no change happened.\"; \
			return 4; \
		fi; \
		if [ -n \"$(git config \"$1\" --get alias.\"$3\")\" ]; then \
			echo \"Alias '$3' already exists, thus no change happened.\"; \
			return 5; \
		fi; \
		git config \"$1\" alias.\"$3\" \"$(git config \"$1\" --get alias.\"$2\")\" && \
		git config \"$1\" --unset alias.\"$2\" && \
		return 0; \
		echo \"Usage: git move-alias ( --local | --global ) <alias existing name> <alias new name>\"; \
		echo \"Error: unknown failure.\"; \
		return 1; \
	};f"
[alias "alias"]
	fixmsh = !git commit --amend -m
