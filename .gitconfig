[core]
	editor = \"C:\\Users\\saumy\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\code\" --wait
	autocrlf = true
[user]
[color]
	ui = auto
[alias]  
	# add just the files that are updated.
	ap = add --patch
	ac = !git add -A && git commit -m
	acp = !git add -p && read -p 'Commit message: ' msg && git commit -m \"\\$msg\" && git push
	aliases = !git config --get-regexp \"alias\\\\.\"
	alias-add = "!f() { git config --global alias.\"$1\" \"$2\"; }; f"
  	au = add --update
	bed = branch --edit-description
	blame = !git blame -w -M -C

	# branch with show description; ideally git will add this feature in the future as `git --show-description`
	bsd = "!f(){ \
		branch=\"${1:-$(git current-branch)}\";  \
		git config \"branch.$branch.description\"; \
	};f"

	br = !git branch
	brr = !git branch -a
	branches = branch -v
	copyPath = "!git rev-parse --show-toplevel | sed -e s#/#\\\\\\\\#g | clip"
	clean-slate = reset --hard && git clean -fd
	colast = checkout -
	config = config --list --global
	create = !git switch -c
	d = !git diff --color-words
	delete-branch = "!f() { git branch -d $1; }; f"
	edit-last = commit --amend
	fap = !git fetch --prune
	find = "!f() { git log --all --grep=\"$1\"; }; f"
	gs = !git status
	history = log --pretty=format:'%h %ad | %s [%an]' --date=short
	ps = !git push
	publish = !git push -u origin HEAD
	ignored = ls-files --others --ignored --exclude-standard
	lol = log --oneline
	log-month = '!git
	last-7-days = log --since='7 days ago' --oneline --graph
	last = log -1 --stat
	modified = ls-files -m
	pushNew = "!f() { git push --set-upstream origin $(git branch --show-current); }; f"
	pull-rebase = pull --rebase
	prep = pull --rebase
	push-safe = push --force-with-lease
	push-all = push --all
	pull-safe = pull --ff-only
	qa = !git commit -m
	recent-branches = for-each-ref --sort=-committerdate --format='%(refname:short) - %(committerdate:relative)' refs/heads/
	remote-branches = branch -r
	reset-hard = !git reset --hard HEAD^
	rb = "!f() { echo fetching...; git fetch; if [ $? -eq 0 ]; then last_status=$(git status --untracked-files=no --porcelain); if [ \"$last_status\" != \"\" ]; then echo stashing local changes...; git stash; else echo nothing to stash...; fi; if [ $? -eq 0 ]; then echo rebasing...; git rebase; if [ $? -eq 0 ]; then if [ \"$last_status\" != \"\" ]; then echo applying stashed changes...; git stash pop; if [ $? -ne 0 ]; then echo STASH POP FAIL - you will need to resolve merge conflicts with git mergetool; fi; fi; else echo REBASE FAILED - you will need to manually run stash pop; fi; fi; fi; fi; if [ $? -ne 0 ]; then echo ERROR: Operation failed; fi; }; f"
	shaf = "!f() { git checkout stash@{} -- ; }; f"
	shs = "!f() { git stash show -p stash@{}; }; f"
	shl = !git stash list
	shm = !git stash push -m
	sha = "!f() { git stash apply stash@\\{$1\\}; }; f"
	sw = !git switch
	sync-safe = "!f() { git pull --ff-only && git push; }; f"
	squash = rebase -i HEAD~5
	today-me = log --since=midnight --author='$(git config user.name)' --oneline --graph
	today-diff = log --since=midnight -p
	today = log --since=midnight --oneline --graph
	today-time = log --since=midnight --pretty=format:'%h %ad | %s [%an]' --date=short
	this-month = log --since='$(date +%Y-%m-01)' --oneline --graph
	this-week = log --since='1 week ago' --oneline --graph
	top-contributors = shortlog -sn --all
	uncommit = reset --soft HEAD~1
	update-all = "!git fetch --all --prune && for branch in $(git branch --format=%(refname:short)); do git checkout $branch && git pull --ff-only; done && git checkout -"
	undo = !git reset --soft HEAD^
	useLast = !git stash apply stash@{0}
	yesterday = log --since='yesterday' --until='midnight' --oneline --graph
[alias "alias"]
	fixmsh = !git commit --amend -m
